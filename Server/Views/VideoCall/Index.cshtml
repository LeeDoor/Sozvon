@{
    ViewData["Title"] = "Видеозвонок";
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Видеозвонок</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background: #f5f5f5;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .video-container {
            display: flex;
            gap: 20px;
            margin-bottom: 20px;
        }

        .video-wrapper {
            flex: 1;
            background: #000;
            border-radius: 10px;
            overflow: hidden;
            position: relative;
        }

            .video-wrapper h3 {
                position: absolute;
                top: 10px;
                left: 10px;
                color: white;
                background: rgba(0,0,0,0.5);
                padding: 5px 10px;
                border-radius: 5px;
                z-index: 1;
                margin: 0;
            }

        video {
            width: 100%;
            height: 400px;
            object-fit: cover;
            background: #000;
        }

        .controls {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
        }

        .btn {
            padding: 10px 20px;
            margin: 5px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
        }

        .btn-success {
            background: #28a745;
            color: white;
        }

        .btn-danger {
            background: #dc3545;
            color: white;
        }

        .btn-primary {
            background: #007bff;
            color: white;
        }

        .btn:disabled {
            background: #6c757d;
            cursor: not-allowed;
        }

        .status {
            padding: 15px;
            background: #e9ecef;
            border-radius: 5px;
            margin: 10px 0;
            font-weight: bold;
        }

        .input-group {
            margin: 10px 0;
        }

        input {
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            width: 200px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>📹 Видеозвонок</h1>

        <div class="video-container">
            <div class="video-wrapper">
                <h3>Ваша камера</h3>
                <video id="localVideo" autoplay muted playsinline></video>
            </div>
            <div class="video-wrapper">
                <h3>Удаленная камера</h3>
                <video id="remoteVideo" autoplay playsinline></video>
            </div>
        </div>

        <div class="controls">
            <h3>Управление звонком</h3>

            <div class="input-group">
                <label>ID комнаты:</label>
                <input type="text" id="roomId" value="room1">
                <button id="joinBtn" class="btn btn-primary">Присоединиться к комнате</button>
            </div>

            <div>
                <button id="startBtn" class="btn btn-success">Начать видеозвонок</button>
                <button id="stopBtn" class="btn btn-danger" disabled>Завершить звонок</button>
            </div>

            <div id="status" class="status">Статус: Нажмите "Присоединиться к комнате"</div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            console.log('✅ Страница загружена');

            // WebRTC переменные
            let localStream = null;
            let peerConnection = null;
            let connection = null;
            let currentRoomId = null;

            // Элементы страницы
            const localVideo = document.getElementById('localVideo');
            const remoteVideo = document.getElementById('remoteVideo');
            const startBtn = document.getElementById('startBtn');
            const stopBtn = document.getElementById('stopBtn');
            const joinBtn = document.getElementById('joinBtn');
            const statusDiv = document.getElementById('status');
            const roomIdInput = document.getElementById('roomId');

            // Функция для отладки
            function debug(message) {
                console.log('🔧 ' + message);
            }

            // Автоматическое подключение
            async function autoConnect() {
                const roomId = 'room1';
                currentRoomId = roomId;
                roomIdInput.value = roomId;

                debug('АВТОПОДКЛЮЧЕНИЕ к комнате: ' + roomId);
                await connectToRoom(roomId);
            }

            // Подключение к комнате
            async function connectToRoom(roomId) {
                try {
                    connection = new signalR.HubConnectionBuilder()
                        .withUrl("/webrtchub")
                        .build();

                    // Обработчик существующих пользователей - САМОЕ ВАЖНОЕ!
                    connection.on("ExistingUsers", (users) => {
                        debug('СУЩЕСТВУЮЩИЕ ПОЛЬЗОВАТЕЛИ: ' + users.length);

                        if (users.length > 0) {
                            statusDiv.textContent = `👥 Найдено ${users.length} пользователь(ей). Начинаем звонок...`;

                            // НЕМЕДЛЕННО начинаем звонок со всеми
                            users.forEach(userId => {
                                debug('СРОЧНЫЙ звонок с: ' + userId);
                                startCallWithUser(userId);
                            });
                        }
                    });

                    // Обработчик нового пользователя
                    connection.on("UserJoined", (userId) => {
                        debug('НОВЫЙ ПОЛЬЗОВАТЕЛЬ: ' + userId);
                        statusDiv.textContent = '📞 Новый пользователь! Начинаем звонок...';
                        startCallWithUser(userId);
                    });

                    // Обработчик WebRTC сигналов
                    connection.on("ReceiveSignal", async (data) => {
                        debug('СИГНАЛ: ' + data.signal.type);
                        await handleSignal(data);
                    });

                    // Запускаем соединение
                    await connection.start();
                    debug('SignalR подключен!');

                    // Присоединяемся к комнате
                    await connection.invoke("JoinRoom", roomId);

                    joinBtn.disabled = true;
                    startBtn.disabled = false;
                    statusDiv.textContent = `✅ В комнате: ${roomId}`;

                    // СРАЗУ запускаем камеру
                    setTimeout(() => {
                        startCall();
                    }, 500);

                } catch (error) {
                    console.error('❌ Ошибка:', error);
                    statusDiv.textContent = '❌ Ошибка: ' + error.message;
                }
            }

            // Ручное подключение
            joinBtn.addEventListener('click', async () => {
                const roomId = roomIdInput.value.trim() || 'room1';
                await connectToRoom(roomId);
            });

            // Ручной запуск камеры
            startBtn.addEventListener('click', startCall);

            // Автоматически начать видеозвонок
            async function startCall() {
                try {
                    statusDiv.textContent = '📹 Запускаем камеру...';

                    localStream = await navigator.mediaDevices.getUserMedia({
                        video: true,
                        audio: true
                    });

                    localVideo.srcObject = localStream;

                    startBtn.disabled = true;
                    stopBtn.disabled = false;
                    statusDiv.textContent = '🎥 Камера активна!';

                    // СРАЗУ создаем PeerConnection
                    createPeerConnection();

                    // СРАЗУ запрашиваем обновленный список пользователей
                    if (connection) {
                        setTimeout(async () => {
                            await connection.invoke("JoinRoom", currentRoomId);
                        }, 1000);
                    }

                } catch (error) {
                    statusDiv.textContent = '❌ Ошибка камеры: ' + error.message;
                }
            }

            // Начать звонок с пользователем
            async function startCallWithUser(userId) {
                debug('🔄 ЗВОНОК с: ' + userId);

                if (!peerConnection) {
                    debug('Создаем PeerConnection для звонка');
                    createPeerConnection();
                }

                try {
                    const offer = await peerConnection.createOffer();
                    await peerConnection.setLocalDescription(offer);

                    await connection.invoke("SendSignal", userId, {
                        type: 'offer',
                        offer: offer
                    });

                    statusDiv.textContent = '🔄 Устанавливаем соединение...';

                } catch (error) {
                    debug('❌ Ошибка оффера: ' + error.message);
                }
            }

            // Обработка сигналов
            async function handleSignal(data) {
                debug('Обрабатываем: ' + data.signal.type);

                if (!peerConnection) {
                    createPeerConnection();
                }

                try {
                    if (data.signal.type === 'offer') {
                        debug('📞 ВХОДЯЩИЙ ЗВОНОК');
                        statusDiv.textContent = '📞 Входящий звонок...';

                        await peerConnection.setRemoteDescription(data.signal.offer);
                        const answer = await peerConnection.createAnswer();
                        await peerConnection.setLocalDescription(answer);

                        await connection.invoke("SendSignal", data.senderId, {
                            type: 'answer',
                            answer: answer
                        });

                        statusDiv.textContent = '✅ Приняли звонок';
                    }
                    else if (data.signal.type === 'answer') {
                        debug('✅ ОТВЕТ получен');
                        await peerConnection.setRemoteDescription(data.signal.answer);
                        statusDiv.textContent = '🤝 Соединение установлено!';
                    }
                    else if (data.signal.type === 'ice-candidate') {
                        await peerConnection.addIceCandidate(data.signal.candidate);
                    }
                } catch (error) {
                    debug('❌ Ошибка сигнала: ' + error.message);
                }
            }

            // Создание PeerConnection
            function createPeerConnection() {
                debug('Создаем PeerConnection');

                peerConnection = new RTCPeerConnection({
                    iceServers: [
                        { urls: 'stun:stun.l.google.com:19302' }
                    ]
                });

                // Добавляем наши треки
                if (localStream) {
                    localStream.getTracks().forEach(track => {
                        peerConnection.addTrack(track, localStream);
                    });
                }

                // Когда получаем удаленное видео
                peerConnection.ontrack = (event) => {
                    debug('🎉 ВИДЕО ПОЛУЧЕНО!');
                    remoteVideo.srcObject = event.streams[0];
                    statusDiv.textContent = '🎉 Видеосвязь установлена!';
                };

                // Отправляем ICE кандидаты
                peerConnection.onicecandidate = (event) => {
                    if (event.candidate) {
                        connection.invoke("SendSignal", '*', {
                            type: 'ice-candidate',
                            candidate: event.candidate
                        }).catch(console.error);
                    }
                };
            }

            // Завершить звонок
            stopBtn.addEventListener('click', () => {
                if (localStream) {
                    localStream.getTracks().forEach(track => track.stop());
                }
                if (peerConnection) {
                    peerConnection.close();
                }

                localVideo.srcObject = null;
                remoteVideo.srcObject = null;

                startBtn.disabled = false;
                stopBtn.disabled = true;

                statusDiv.textContent = '📞 Звонок завершен';
            });

            // АВТОМАТИЧЕСКИЙ СТАРТ
            setTimeout(() => {
                autoConnect();
            }, 500);
        });
    </script>
</body>
</html>